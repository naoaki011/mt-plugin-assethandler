### AssetHandler - A plugin for Movable Type.
# Copyright (c) 2007, Arvind Satyanarayan.
# This program is distributed under the terms of the
# GNU General Public License, version 2.
# $Id$
### Modified for MT5.1 or Later
# By. Naoaki Onozaki
name: AssetHandler
key: AssetHandler
id: AssetHandler
l10n_class: AssetHandler::L10N
version: 2.041
author_name: naoaki.onozaki
author_link: http://www.zelazny.mydns.jp/
plugin_link: https://github.com/naoaki011/mt-plugin-assethandler
description: <__trans phrase="AssetHandler allows you to mass import and manage assets in Movable Type">

callbacks:
  MT::App::CMS::template_source.list_asset: $AssetHandler::AssetHandler::App::CMS::cb_list_asset_src
  MT::App::CMS::template_param.list_asset: $AssetHandler::AssetHandler::App::CMS::cb_list_asset_param
  MT::App::CMS::template_source.asset_table: $AssetHandler::AssetHandler::App::CMS::cb_asset_table
  app_pre_listing_list_asset: $AssetHandler::AssetHandler::App::CMS::cb_list_asset_pre_listing
  list_template_param.asset: $AssetHandler::AssetHandler::App::CMS::cb_list_param_asset
  template_param.header: $AssetHandler::AssetHandler::App::CMS::cb_header_param
applications:
  cms:
    page_actions:
      list_asset:
        transport_assets:
          label: Import Assets
          mode: asset_import
          condition: $AssetHandler::AssetHandler::Util::is_blog_context
      list_assets:
        transport_assets:
          label: Import Assets
          mode: asset_import
          condition: $AssetHandler::AssetHandler::Util::is_blog_context
    methods:
      asset_batch_editor: $AssetHandler::AssetHandler::App::CMS::open_batch_editor
      save_assets: $AssetHandler::AssetHandler::App::CMS::save_assets
      cancel_assets: $AssetHandler::AssetHandler::App::CMS::cancel_assets
      asset_import: $AssetHandler::AssetHandler::App::CMS::start_transporter
      handle_transport_assets: $AssetHandler::AssetHandler::App::CMS::transport
    menus:
      asset:upload:
        label: Upload
      asset:import:
        label: Import
        order: 300
        mode: asset_import
        condition: $AssetHandler::AssetHandler::Util::is_post_illiad
        permission: upload
        view:
          - website
          - blog
system_filters:
  asset:
    no_assoc:
      filter_editable: 0
      label: Asset associated with no objects
      items:
        - type: not_associated_objects
      order: 1000
list_actions:
  asset:
    batch_editor:
      label: Batch Edit
      code: $AssetHandler::AssetHandler::App::CMS::open_batch_editor
      order: 200
      no_prompt: 1
      button: 1
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
    unlink:
      label: Unlink
      code: $AssetHandler::AssetHandler::App::CMS::unlink_asset
      order: 300
      button: 1
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      js_message: delete
    fix_path_tor:
      label: FullPath to %r
      code: $AssetHandler::AssetHandler::App::CMS::path_tor
      order: 310
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      js_message: edit
    fix_path_tofull:
      label: Flatten Path
      code: $AssetHandler::AssetHandler::App::CMS::flatten_path
      order: 320
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      js_message: edit
    fix_url:
      label: Fix wrong URL from Path
      code: $AssetHandler::AssetHandler::App::CMS::fix_url
      order: 330
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      js_message: edit
    modify_path:
      label: Modify File Path
      code: $AssetHandler::AssetHandler::App::CMS::modify_path
      order: 340
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      input: 1
      input_label: 'Specify a folder relative to the blog site path/URL to modify the selected asset(s) path to. Examples: enter a single folder ("assets/"), enter a subdirectory path ("my/asset/location/"), or modify assets to the blog root with "/".'
      no_prompt: 1
    move_assets:
      label: Move Assets
      code: $AssetHandler::AssetHandler::App::CMS::move_assets
      order: 350
      permission: upload
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      input: 1
      input_label: 'Specify a folder relative to the blog site path/URL to move the selected asset(s) to. Examples: enter a single folder ("assets/"), enter a subdirectory path ("my/asset/location/"), or move assets to the blog root with "/".'
      no_prompt: 1
    rename_assets:
      label: Rename Assets
      code: $AssetHandler::AssetHandler::App::CMS::rename_assets
      order: 360
      permission: upload
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      input: 1
      input_label: 'Specify a filename to rename the selected asset(s) to. Examples: examples.jpg or examples.'
      no_prompt: 1
    fix_datas:
      label: Fix AssetDatas
      code: $AssetHandler::AssetHandler::App::CMS::fix_datas
      order: 370
      permission: edit_assets
      condition: $AssetHandler::AssetHandler::Util::is_blog_context
      js_message: edit
list_properties:
  asset:
    label:
      auto: 1
      label: Label
      order: 200
      display: force
      sub_fields:
        -
          class: view
          label: View
          display: optional
      bulk_html: >
        sub {
          my $prop = shift;
          my ( $objs, $app ) = @_;
          my @userpics = MT->model('objecttag')->load(
            { blog_id           => 0,
              object_datasource => 'asset',
              object_id         => [ map { $_->id } @$objs ],
            },
            { fetchonly => { object_id => 1 },
              join      => MT->model('tag')->join_on(
                undef,
                { name => '@userpic',
                  id   => \'= objecttag_tag_id'
                }
              ),
            }
          );
          my %is_userpic = map { $_->object_id => 1 } @userpics;
          my @rows;
          for my $obj (@$objs) {
            my $id = $obj->id;
            my $label
              = MT::Util::remove_html( $obj->label
                || $obj->file_name
                || 'Untitled' );
            my $blog_id
              = $obj->has_column('blog_id') ? $obj->blog_id
              : $app->blog                  ? $app->blog->id
              :                             0;
            my $type      = $prop->object_type;
            my $edit_link = $app->uri(
              mode => 'view',
              args => {
                _type   => $type,
                id      => $id,
                blog_id => $blog_id,
              },
            );
            my $class_type = $obj->class_type;
            my $url = $obj->url;
            my $view = MT->translate('View');
            my $view_img = MT->static_path . 'images/status_icons/view.gif';
            require MT::FileMgr;
            my $fmgr      = MT::FileMgr->new('Local');
            my $file_path = $obj->file_path;
            ## FIXME: Hardcoded
            my $thumb_size = 45;
            my $userpic_sticker
              = $is_userpic{ $obj->id }
              ? q{<span class="inuse-userpic sticky-label">Userpic</span>}
              : '';
            if ( $file_path && $fmgr->exists($file_path) ) {
              my $img
                = MT->static_path
                . 'images/asset/'
                . $class_type
                . '-45.png';
              if ( $obj->has_thumbnail ) {
                my ( $orig_width, $orig_height )
                  = ( $obj->image_width, $obj->image_height );
                my ( $thumbnail_url, $thumbnail_width,
                  $thumbnail_height );
                if (   $orig_width > $thumb_size
                  && $orig_height > $thumb_size )
                {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Height => $thumb_size,
                    Width  => $thumb_size,
                    Square => 1
                    );
                }
                elsif ( $orig_width > $thumb_size ) {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Width => $thumb_size, );
                }
                elsif ( $orig_height > $thumb_size ) {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = $obj->thumbnail_url(
                    Height => $thumb_size, );
                }
                else {
                  (   $thumbnail_url, $thumbnail_width,
                    $thumbnail_height
                    )
                    = ( $obj->url, $orig_width,
                    $orig_height );
                }
                my $thumbnail_width_offset = int(
                  ( $thumb_size - $thumbnail_width ) / 2 );
                my $thumbnail_height_offset = int(
                  ( $thumb_size - $thumbnail_height ) / 2 );
                push @rows, qq{
                  <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                  <div class="thumbnail picture small">
                    <img alt="" src="$thumbnail_url" style="padding: ${thumbnail_height_offset}px ${thumbnail_width_offset}px" />
                  </div>
                };
              }
              else {
                push @rows, qq{
                  <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                  <div class="file-type $class_type picture small">
                    <img alt="$class_type" src="$img" class="asset-type-icon asset-type-$class_type" />
                  </div>
                };
              }
            }
            else {
              if ( $class_type =~ /^(image|audio|video|file)$/ ) {
                my $img
                  = MT->static_path
                  . 'images/asset/'
                  . $class_type
                  . '-warning-45.png';
                  push @rows, qq{
                    <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                    <div class="file-type missing picture small">
                      <img alt="$class_type" src="$img" class="asset-type-icon asset-type-$class_type" />
                    </div>
                  };
              }
              else {
                if (($obj->has_thumbnail)&&($obj->thumbnail_url(Width=>45,Height=>45))) {
                  my $thumbnail_url = $obj->thumbnail_url(Width=>45,Height=>45);
                  push @rows, qq{
                    <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                    <div class="thumbnail picture small">
                      <img alt="" src="$thumbnail_url" class="asset-type-icon asset-type-$class_type" />
                    </div>
                  };
                }
                else {
                  my $img
                    = MT->static_path
                    . 'images/asset/file-warning-45.png';
                  push @rows, qq{
                    <span class="title"><a href="$edit_link">$label</a></span>$userpic_sticker<span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
                    <div class="file-type missing picture small">
                      <img alt="$class_type" src="$img" class="asset-type-icon asset-type-$class_type" />
                    </div>
                  };
                }
              }
            }
          }
          @rows;
        }
    file_name:
      auto: 1
      display: optional
      order: 300
      label: File Name
      sub_fields:
        -
          class: pixels
          label: Pixels
          display: optional
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $file_name = $obj->file_name;
          my $out;
          if ($obj->class eq 'image') {
            my $width = $obj->image_width;
            my $height = $obj->image_height;
            $out = qq {
              <span>$file_name</span><span class="pixels"><br />
              ($width px X $height px)</span>
            };
          }
          else {
            $out = qq {
              <span>$file_name</span>
            };
          }
          return $out;
        }
    url:
      auto: 1
      order: 400
      label: Link
      filter_label: URL
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $url = $obj->url;
          my $view = MT->translate('View');
          my $view_img = MT->static_path . 'images/status_icons/view.gif';
          my $out = qq {
            <span>$url</span><span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
          };
          return $out;
        }
    file_path:
      auto: 1
      order: 400
      label: Path
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $path = $obj->file_path;
          $path =~ s{\\}{/}g;
          my $url = $obj->url;
          my $view = MT->translate('View');
          my $view_img = MT->static_path . 'images/status_icons/view.gif';
          my $out = qq {
            <span>$path</span><span class="view">&nbsp;<a href="$url"><img src="$view_img" alt="$view" /></a></span>
          };
          return $out;
        }
    folder:
      auto: 1
      base: __virtual.string
      order: 410
      label: Folder
      html: >
        sub {
          my ($prop, $obj, $app) = @_;
          my $path = $obj->file_path;
          $path =~ s{\\}{/}g;
          $path =~ s{/[^/]+$}{/};
          my $site_path = $app->blog->site_path;
          $site_path =~ s{\\}{/}g;
          $site_path =~ s{/$}{};
          $path    =~ s!$site_path!!;
          $path    =~ s!^/$!-!;
          my $out = qq {
            <span>$path</span>
          };
          return $out;
        }
    created_on:
      auto: 1
      order: 500
      sub_fields:
        -
          class: created_time
          label: <__trans_section component='AssetHandler'><__trans phrase='Created Time'></__trans_section>
          display: optional
      html: >
        sub {
          use MT::Util qw( format_ts );
          my ($prop, $obj, $app) = @_;
          my $created_on =
            format_ts( MT::App::CMS::LISTING_DATE_FORMAT(), $obj->created_on, $app->blog, $app->user ? $app->user->preferred_language : undef );
          my $created_time =
            format_ts( '%I:%M:%S%p', $obj->created_on, $app->blog, $app->user ? $app->user->preferred_language : undef );
          my $out = qq {
            <span>$created_on</span><span class="created_time"><br />$created_time</span>
          };
          return $out;
        }
    modified_on:
      auto: 1
      order: 500
      display: optional
      sub_fields:
        -
          class: modified_time
          label: <__trans_section component='AssetHandler'><__trans phrase='Modified Time'></__trans_section>
          display: optional
      html: >
        sub {
          use MT::Util qw( format_ts );
          my ($prop, $obj, $app) = @_;
          my $modified_on =
            format_ts( MT::App::CMS::LISTING_DATE_FORMAT(), $obj->modified_on, $app->blog, $app->user ? $app->user->preferred_language : undef );
          my $modified_time =
            format_ts( '%I:%M:%S%p', $obj->modified_on, $app->blog, $app->user ? $app->user->preferred_language : undef );
          my $out = qq {
            <span>$modified_on</span><span class="modified_time"><br />$modified_time</span>
          };
          return $out;
        }
    description:
      auto: 1
      display: optional
      order: 600
      label: Description
      raw: >
        sub {
          my ( $prop, $obj ) = @_;
          return (length($obj->description) > 28) ? substr($obj->description, 0, 28).'...' : $obj->description;
        }
    mime_type:
      auto: 1
      display: optional
      order: 600
      label: MIME Media Type
    class:
      auto: 1
      base: __virtual.single_select
      display: optional
      order: 600
      label: Type
      col: class
      terms: >
        sub {
          my $prop = shift;
          my ( $args, $db_terms, $db_args ) = @_;
          my $value = $args->{value};
          $db_args->{no_class} = 0;
          $db_terms->{class}   = $value;
          return;
        }
      single_select_options:
        - label: Image
          value: image
        - label: Audio
          value: audio
        - label: Video
          value: video
        - label: File
          value: file
    file_ext:
      auto: 1
      display: optional
      order: 600
      label: File Extension
    parent:
      auto: 1
      label: Parent AssetID
      order: 1100
      html_link: >
        sub {
          my $prop = shift;
          my ( $obj, $app, $opts ) = @_;
          return $app->uri(
            mode => 'view',
            args => {
              _type => 'asset',
              blog_id => $obj->blog_id,
              id => $obj->parent,
            },
          );
        }
    associated_objects:
      label: Associated Objects
      order: 1200
      bulk_html: >
        sub {
          my ($prop, $assets, $app, $opts) = @_;
          # load objectassets
          my @asset_ids = map { $_->id } @$assets;
          my @obj_assets = $app->model('objectasset')->load(
            { asset_id => \@asset_ids, }
          );
          # associates with assets and objects
          my (%class_obj_ids, %asset_obj_ids, %class_objs);
          for my $obj_asset (@obj_assets) {
            my $ds = $obj_asset->object_ds;
            my $asset_id = $obj_asset->asset_id;
            my $object_id = $obj_asset->object_id;
            $asset_obj_ids{$asset_id}->{$ds} = {}
              unless (defined($asset_obj_ids{$asset_id}->{$ds}));
            $asset_obj_ids{$asset_id}->{$ds}->{$object_id} = 1;
            $class_obj_ids{$ds} = {}
              unless (defined($class_obj_ids{$ds}));
            $class_obj_ids{$ds}->{$object_id} = 1;
          }
          # load objects
          for my $class (keys %class_obj_ids) {
            my @obj_ids = keys %{$class_obj_ids{$class}};
            my @cur_class_objs = $app->model($class)->load({ id => \@obj_ids });
            my %cur_class_objs = map { $_->id => $_ } @cur_class_objs;
            $class_objs{$class} = \%cur_class_objs;
          }
          my $plugin = MT->component('AssetHandler');
          # create bulk html
          my @rows;
          for my $asset (@$assets) {
            if ($asset->parent) {
              push @rows, '<span class="is_tumbnail">-</span>';
            }
            else {
              my $html;
              my @classes = keys %{$asset_obj_ids{$asset->id}};
              for (my $i = 0; $i < scalar(@classes); $i++) {
                my $class = $classes[$i];
                $html = '<ul>' if (!$i);
                my @obj_ids = keys %{$asset_obj_ids{$asset->id}->{$class}};
                for my $obj_id (@obj_ids) {
                  my $obj = $class_objs{$class}->{$obj_id};
                  $html .= '<li class="assoc-' . $obj->class . '">';
                  my $url = $app->uri(
                    mode => 'view',
                    args => {
                      '_type' => $obj->class,
                      'id' => $obj->id,
                      ($obj->has_column('blog_id'))
                        ? ('blog_id' => $obj->blog_id)
                        : (),
                    },
                  );
                  my $has_label = 0;
                  for my $label_col qw( name title label ) {
                    if ($obj->has_column($label_col)) {
                      if ($obj->column($label_col)) {
                        $html .= '<a class="icon-left icon-' . $obj->class . '" href="' . $url . '" title="(' . $obj->class_label . ')' . $obj->column($label_col) . '">' . $obj->column($label_col) . '</a>';
                        $has_label = 1;
                        last;
                      }
                    }
                  }
                  if (!$has_label) {
                    $html .= '(' . $obj->class_label . ')<a href="' . $url . '" title="(' . $obj->class_label . ')' . $obj->id . '">ID:' . $obj->id . '</a>';
                  }
                  $html .= '</li>';
                }
                $html .= '</ul>' if ($i == scalar(@classes) - 1);
              }
              push @rows, ($html) ? $html : '<span class="hint">' . $plugin->translate('This asset has not been used.') . '</span>';
            }
          }
          return @rows;
        }
    not_associated_objects:
      base: __virtual.hidden
      label: Asset associated with no objects
      display: none
      order: 1200
      terms: >
        sub {
          my ( $prop, $args, $db_terms, $db_args ) = @_;
          $db_args->{joins} ||= [];
          push @{ $db_args->{joins} },
            MT->model('objectasset')->join_on(
              undef,
              {
                id => \'is null',
              },
              {
                type => 'left',
                condition => {
                  asset_id => \'= asset_id',
                },
              },
            );
          return;
        }
      singleton: 1
    tags:
      label: Tag
      order: 1200
      col_class: string
      html: >
        sub {
          my ($prop, $obj) = @_;
          my @tags =$obj->tags;
          return join ', ', (map { MT::Util::encode_html($_) } @tags);
        }
